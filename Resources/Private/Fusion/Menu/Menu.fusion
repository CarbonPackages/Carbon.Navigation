prototype(Carbon.Navigation:Menu) < prototype(Neos.Neos:Menu) {
    // The properties of an item is available under following variables
    // - item.menuLevel
    // - item.subItems
    // - item.state

    useBEM = ${Configuration.setting('Carbon.Navigation.useBEM')}
    namespace = ${Configuration.setting('Carbon.Navigation.Menu.namespace')}
    wrapText = ${Configuration.setting('Carbon.Navigation.Menu.wrapText')}
    listTag = ${Configuration.setting('Carbon.Navigation.Menu.listTag')}
    elementTag = ${Configuration.setting('Carbon.Navigation.Menu.elementTag')}

    entryLevel = ${this.startingPoint ? 0 : 1}
    maximumLevels = ${Configuration.setting('Carbon.Navigation.Menu.maximumLevels')}
    filter = ${Configuration.setting('Carbon.Navigation.Menu.filter')}
    showHome = ${Configuration.setting('Carbon.Navigation.Menu.showHome')}

    prototype(Carbon.Navigation:Class) {
        isFirst = ${showHome ? false : iteration && iteration.isFirst}
    }

    beforeFirst = Carbon.Navigation:Link {
        @if.render = ${showHome && item.menuLevel == entryLevel}
        node = ${site}

        prototype(Carbon.Navigation:Class) {
            isFirst = true
            isLast = false
            state = ${documentNode == site ? 'current' : 'normal'}
            hasSubpages = false
        }

        additionalClass = Carbon.Navigation:Class {
            name = 'link'
        }
        @process.wrap = Neos.Fusion:Tag {
            @if.hasTag = ${elementTag}
            tagName = ${elementTag}
            attributes.class = Carbon.Navigation:Class {
                name = 'element'
            }
            content = ${value}
        }
    }
    afterLast = false
    beforeItem = false
    afterItem = false

    @context {
        namespace = ${this.namespace}
        useBEM = ${this.useBEM}
        wrapText = ${this.wrapText}
        showHome = ${this.showHome}
        elementTag = ${this.elementTag}
    }

    link = Carbon.Navigation:Link {
        additionalClass = Carbon.Navigation:Class {
            name = 'link'
        }
    }

    list.attributes = Neos.Fusion:Attributes {
        class = Carbon.Navigation:Class {
            name = 'list'
        }
    }

    element.attributes = Neos.Fusion:Attributes {
        class = Carbon.Navigation:Class {
            name = 'element'
        }
    }

    # if Carbon.Hypen is available, always replace shy
    @process.shy = Neos.Fusion:Value {
        @if.carbonHypenExists = Ttree.Fusion:CanRender {
            type = 'Carbon.Hyphen:Shy.AlwaysReplace'
        }
        value = Carbon.Hyphen:Shy.AlwaysReplace
    }
    templatePath = ${Configuration.setting('Carbon.Navigation.templatePath')}
    sectionName = 'Menu'
}
