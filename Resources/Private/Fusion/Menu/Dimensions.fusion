prototype(Carbon.Navigation:Dimensions) < prototype(Neos.Fusion:Component) {
    namespace = ${Configuration.setting('Carbon.Navigation.Dimensions.namespace')}
    wrapText = ${Configuration.setting('Carbon.Navigation.Dimensions.wrapText')}
    renderCurrent = ${Configuration.setting('Carbon.Navigation.Dimensions.renderCurrent')}
    listTag = ${Configuration.setting('Carbon.Navigation.Dimensions.listTag')}
    elementTag = ${Configuration.setting('Carbon.Navigation.Dimensions.elementTag')}
    renderClass = ${Configuration.setting('Carbon.Navigation.Dimensions.renderClass')}
    useUriSegmentAsLabel =  ${Configuration.setting('Carbon.Navigation.Dimensions.useUriSegmentAsLabel')}
    mulitipleDimensionDivider = ${Configuration.setting('Carbon.Navigation.Dimensions.mulitipleDimensionDivider')}

    renderHiddenInIndex = true
    dimension = null
    presets = null
    includeAllPresets = false

    prototype(Carbon.Navigation:Tag) {
        @if.renderItem = ${this.renderCurrent || this.item.state != 'current'}
    }

    prototype(Carbon.Navigation:Label) {
        renderer = Neos.Fusion:Case {
            hasSingleDimension {
                condition = ${props.dimension}
                renderer = ${props.useUriSegmentAsLabel ? props.item.targetDimensions[props.dimension].value : props.item.label}
            }
            multipleDimension {
                condition = true
                renderer = Neos.Fusion:Loop {
                    items = ${props.item.targetDimensions}
                    itemRenderer = ${props.useUriSegmentAsLabel ? item.value : item.label}
                    @glue = ${props.mulitipleDimensionDivider}
                }
            }
        }
    }

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        @if.render = ${Type.isArray(this.menuItems) && Array.length(this.menuItems)}
        @process.shy = Carbon.Navigation:Hyphen

        menuItems = Neos.Neos:DimensionsMenuItems {
            @apply.props = ${props}
        }

        renderer = afx`
            <Carbon.Navigation:List {...props} items={props.menuItems} />
        `
    }
}
